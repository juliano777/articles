PostgreSQL: PL/Python - Writing Functions and Stored Procedures in Python 


About this article

	This is a alternative version of "On snakes and elephants Using Python inside PostgreSQL" by Jan UrbaÅ„ski.

	https://wulczer.org/pywaw-summit.pdf

About Python

- Very high level programming language;
- Fully object oriented;
- Easy to learn;
- Easy maintenance;
- Batteries included (Standard libraries / modules);
- Wide variety of third party libraries / modules;
- General purpose, e. g.; Script, Web, Desktop, Embbeded;
- Strong and dynamic typing;
- Strong and friendly community;
- Objective and very productive: do more writing less! :)

> import this [https://www.python.org/dev/peps/pep-0020/]


www.python.org


About PostgreSQL

	PostgreSQL is a Object Relational Database Management System, originally developed at the University of California, Department of Computer Science in Berkeley.
	It's currently developed and maintained by the PGDG (PostgreSQL Global Development Group).

- Open source;
- Rich in advanced features;
- Very friendly for developers;
- Extensible;
- Multi paradigm: relational and NoSQL features;

www.postgresql.org


Functions and Stored Procedures in PostgreSQL

- In PostgreSQL the default procedural language is PL/pgSQL, that is very similar to Oracle's PL/SQL;
- Implements operations that are not be easy or not possible with pure SQL;
- A function or a stored procedure is called inside SQL;
- It can encapsulate logic business;
- PL/Python, PL/Perl and PL/Tcl are nativelly supported, but is possible to use other procedural languages such as PL/Java, PL/PHP, PL/v8 (JavaScript), PL/R and etc;
- Support for function overload.


Functions vs Stored Procedures

Function

- Can RETURN a value;
- Executed by a simple SELECT statement;


Stored Procedure

- Can run Transactions (COMMIT / ROLLBACK);
- Executed by a CALL statement;



Examples... (PL/PgSQL)


Table for tests:

CREATE TABLE tb_foo (my_field int);



Function creation:

CREATE OR REPLACE FUNCTION fc_foo(my_value INT)
RETURNS INT AS $body$

BEGIN
    -- A simple calculation...
    RETURN my_value * 3;
END;

$body$ LANGUAGE PLPGSQL;



Stored procedure creation:

CREATE OR REPLACE PROCEDURE sp_foo(my_value INT) AS $body$

BEGIN
    INSERT INTO tb_foo (my_field) SELECT fc_foo(my_value);
END;

$body$ LANGUAGE PLPGSQL;



Call the procedure:

CALL sp_foo(7);



Check the result:

SELECT my_field FROM tb_foo;

+------------+
| my_field   |
|------------|
| 21         |
+------------+

	We can notice the result after combining a function and a stored procedure (just for example).



Overloading


Function creation with two arguments:

CREATE OR REPLACE FUNCTION fc_foo(my_value_1 INT, my_value_2 INT)
RETURNS INT AS $body$

BEGIN
    -- A simple calculation...
    RETURN my_value_1 + my_value_2;
END;

$body$ LANGUAGE PLPGSQL;



Stored procedure creation with two arguments:

CREATE OR REPLACE PROCEDURE sp_foo(my_value_1 INT, my_value_2 INT) AS $body$

BEGIN
    INSERT INTO tb_foo (my_field) SELECT fc_foo(my_value_1, my_value_2);
END;

$body$ LANGUAGE PLPGSQL;



Call the procedure:

CALL sp_foo(5, 2);



Check the result:

SELECT my_field FROM tb_foo;

+------------+
| my_field   |
|------------|
| 21         |
| 7          |
+------------+

	Now, we just see the result after create a new function and a new stored procedure with the same name, but using different arguments configuration. Technically, are new objects despite its names.



DO: Anonymous Code Blocks


Syntax:

DO $$

. . .
code
. . .
$$ LANGUAGE procedural_language;



SET client_min_messages = 'notice';

DO $$
DECLARE n_con INT;
BEGIN
    SELECT count(client_addr)
        INTO n_con
        FROM pg_stat_activity;

    RAISE NOTICE
        'non-local connections: %', n_con;
END; $$ LANGUAGE PLPGSQL;

NOTICE:  non-local connections: 1




PL/Python

PL/Python is the Python implementation as procedural language in PostgreSQL;

Allows us to use all the Python libraries installed in the operating system;

When running PL/Python for the first time after PostgreSQL server boots, a
Python interpreter is initialized into backend process;


https://www.postgresql.org/docs/current/static/plpython.html


To avoid an intial delay we can configure to load the plpython.so system library in some "preload" configuration;

PostgreSQL data types are converted to Python data types and vice-versa;

The arguments of a function or stored procedure have global scope;

The plpy module provides access to database and functions;

The path of modules depends on environment variable PYTHONPATH of user that starts the PostgreSQL service.


PL/Python Data Types


PostgreSQL -> Python

bigint, integer, smallint -> int
real, double -> float
numeric -> Decimal
boolean -> bool
text, varchar, char -> str
array -> list
custom types -> dict
null -> None


PL/PythonU: What Means this "U"?

PL/Python is a procedural language that is considered as "Untrusted";

Which means that no form of restriction is offered for users to do;

PL/Python allows actions outside of the database;

Only superusers can create functions in untrusted languages like PL/PythonU.

"With great power comes great responsibility" 

Ben Parker / Uncle Ben (Stan Lee)























